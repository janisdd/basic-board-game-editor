<!DOCTYPE html>
<html>
<head>
    <title>Basic Board Game Editor</title>
    <meta charset="UTF-8">

    <link rel="stylesheet" href="semantic.min.css">
    <link rel="stylesheet" href="<%= htmlWebpackPlugin.files.css[0] %>">
    <style>
        .player-color-indicator {
            height: 10px;
            width: 10px;
            border: 1px solid black;
            margin-right: 0.5em;
        }
        .syn-img {
            border: 1px solid black;
        }
    </style>
</head>
<body>


<!-- style="display: none" -->
<video  autoplay="true" id="realImgSrc" width="300" height="300">
</video>
<!--<video  autoplay="true" id="realImgSrc" >-->
<!--</video>-->

<button onclick="bbge.onInitReferee()">init</button>
<input type="file" accept=".world" onchange="bbge.onWorldInputChanged(event)">

<canvas id="canvasSnaptshot" width="1900" height="1080"></canvas>



<br />


<button onclick="bbge.onDetectColors()">detect colors (tokens)</button>

<div id="player-color-mapping-table-wrapper">

</div>

<button onclick="bbge.onGetHomography()">get homography</button>

<button onclick="bbge.onGetDice()">get dice</button>
<button onclick="bbge.onNextRound()">next round</button>

<button onclick="bbge.onGetRealState()">get real state</button>

<button onclick="bbge.onCompareStatesClicked()">compare states</button>


<div>
    <h3>simulation state</h3>

    <canvas id="world-renderer-canvas" width="1000" height="1000"></canvas>

    <div id="variables-table" style="float: right">

    </div>

    <h3>real (synthetic) state</h3>
    <canvas id="world-real-canvas" width="1000" height="1000"></canvas>


</div>



<!-- alle synthetic imgs from the world-->
<h3>debug syn imgs (used for keypoint detection/homography)</h3>
<div id="debug-syn-imgs-wrapper">

</div>

<h3>debug syn imgs with rects</h3>
<div id="debug-syn-homographies">

</div>




<script src="easeljs-0.8.2.combined.js"></script>

<!-- just to init cam stream -->
<script src="init.js"></script>

<script src="opencv.js" onload="onOpenCvReady();"></script>

<!-- app.js will be injected by HtmlWebpackPlugin (with a cache busting hash) -->

</body>
</html>
